{"version":3,"sources":["Keyboard.js","Word.js","App.js","serviceWorker.js","index.js"],"names":["Keyboard","window","addEventListener","e","props","alphabet","includes","key","toUpperCase","action","id","this","map","letter","onClick","className","usedLetter","Component","Word","guesseWord","split","status","WORDS","App","state","matchedLetters","guesses","message","clickLetter","setState","setTimeout","document","querySelectorAll","length","endGame","initGame","generateWords","keyCode","Math","floor","random","won","role","aria-label","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"yTA4BeA,G,8LAxBO,IAAD,OACnBC,OAAOC,iBAAiB,WAAW,SAACC,GAC/B,EAAKC,MAAMC,SAASC,SAASH,EAAEI,IAAIC,gBACtC,EAAKJ,MAAMK,OAAON,EAAEI,IAAIC,oB,+BAKjB,IAAD,OACR,OACC,yBAAKE,GAAG,YACNC,KAAKP,MAAMC,SAASO,KAAI,SAACC,EAAQN,GAAT,OACxB,4BACCA,IAAK,YAAcA,EACnBO,QAAS,kBAAM,EAAKV,MAAMK,OAAOI,IACjCE,UAAW,EAAKX,MAAMY,WAAWV,SAASO,GAAU,OAAS,IAC5DA,W,GAjBgBI,cCwBRC,G,MAvBF,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYH,EAAf,EAAeA,WAAf,OACZ,yBAAKN,GAAG,aACNS,EAAWC,MAAM,IAAIR,KAAI,SAACC,EAAQN,GAClC,IAAIc,EAAS,QAMb,OAJKL,EAAWV,SAASO,KACxBQ,EAAS,cAIT,0BAAMd,IAAK,UAAYA,EAAKQ,UAAWM,GAC1B,UAAXA,EAAqBR,EAArB,aCVAS,EAAQ,CACX,aACA,QACA,QACA,UACA,UACA,SACA,SACA,UACA,SACA,QACA,SACA,WACA,QACA,QACA,SACA,UACA,SACA,UACA,YA2GYC,E,4MArGdC,MAAQ,CACPL,WAAY,GACZM,eAAgB,EAChBC,QAAS,EACTrB,SAAU,6BAA6Be,MAAM,IAC7CJ,WAAY,GACZW,QAAS,I,EAYVC,YAAc,SAACf,GAAY,IAAD,EACmB,EAAKW,MAAzCE,EADiB,EACjBA,QAASP,EADQ,EACRA,WAAYH,EADJ,EACIA,WAExBA,EAAWV,SAASO,IACxB,EAAKgB,SAAS,CACbb,WAAW,CAAEH,GAAH,mBAAcG,MAIrBG,EAAWb,SAASO,GAMxBiB,YAAW,kBAAM,EAAKD,SAAS,CAC9BJ,eAAgBM,SAASC,iBAAiB,UAAUC,WAChD,GAPL,EAAKJ,SAAS,CACbH,QAASA,EAAU,IASrB,EAAKQ,W,EAmBNC,SAAW,WACV,EAAKN,SAAS,CACbV,WAAY,EAAKiB,gBACjBpB,WAAY,GACZU,QAAS,EACTC,QAAS,GACTF,eAAgB,K,kEAtDG,IAAD,OACnBxB,OAAOC,iBAAiB,SAAS,SAACC,GAChB,KAAdA,EAAEkC,SACJ,EAAKF,cAGPxB,KAAKwB,a,gCA2BI,IAAD,SACwCxB,KAAKa,MAA7CE,EADA,EACAA,QAASP,EADT,EACSA,WAAYM,EADrB,EACqBA,eACb,IAAZC,IACHf,KAAKkB,SAAS,CAACF,QAAQ,sBACvBG,YAAW,kBAAM,EAAKK,aAlDN,MAoDbV,IAAmBN,EAAWc,QACjCtB,KAAKwB,a,sCAKN,OAAOb,EAAMgB,KAAKC,MAAMD,KAAKE,SAASlB,EAAMW,W,+BAanC,IAAD,EACuEtB,KAAKa,MAA5EE,EADA,EACAA,QAASC,EADT,EACSA,QAASF,EADlB,EACkBA,eAAgBN,EADlC,EACkCA,WAAYH,EAD9C,EAC8CA,WAAYX,EAD1D,EAC0DA,SAC5DoC,EAAMhB,IAAmBN,EAAWc,OAE1C,OACC,yBAAKlB,UAAU,cACd,4CACA,sCAAUW,EAAV,SACc,KAAZC,GAAmB,yBAAKZ,UAAU,UAAS,2BAAKY,GAClD,2BAAG,0BAAMe,KAAK,MAAMC,aAAW,SAA5B,kBACc,OAAfxB,GACD,kBAAC,EAAD,CACCA,WAAYA,EACZH,WAAYA,IAIZyB,GAAO,yBAAK1B,UAAU,SAASL,GAAG,UAAS,2BAAG,0BAAMgC,KAAK,MAAMC,aAAW,UAA5B,iBAAkD,0GAIlG,kBAAC,EAAD,CACCtC,SAAUA,EACVI,OAAQE,KAAKiB,YACbZ,WAAYA,S,GA5FCC,aCjBE2B,QACW,cAA7B3C,OAAO4C,SAASC,UAEe,UAA7B7C,OAAO4C,SAASC,UAEhB7C,OAAO4C,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASoB,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMhC,c","file":"static/js/main.241808a7.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./Keyboard.css\"\n\nclass Keyboard extends Component {\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keydown\", (e) => {\n\t\t\tif (this.props.alphabet.includes(e.key.toUpperCase())) {\n\t\t\t\tthis.props.action(e.key.toUpperCase());\n\t\t\t}\n\t\t});\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div id=\"keyboard\">\n\t\t\t\t{this.props.alphabet.map((letter, key) => (\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={\"keyboard_\" + key}\n\t\t\t\t\t\tonClick={() => this.props.action(letter)}\n\t\t\t\t\t\tclassName={this.props.usedLetter.includes(letter) ? \"used\" : ''}>\n\t\t\t\t\t\t{letter}\n\t\t\t\t\t</button>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Keyboard;\n","import React from \"react\";\nimport './Word.css';\nimport PropTypes from 'prop-types';\n\nconst Word = ({ guesseWord, usedLetter }) => (\n\t<div id=\"wordFound\">\n\t\t{guesseWord.split(\"\").map((letter, key) => {\n\t\t\tlet status = \"found\";\n\n\t\t\tif (!usedLetter.includes(letter)) {\n\t\t\t\tstatus = \"mismatched\";\n\t\t\t}\n\n\t\t\treturn (\n\t\t\t\t<span key={\"letter_\" + key} className={status}>\n\t\t\t\t\t{status === \"found\" ? letter : ` _ `}\n\t\t\t\t</span>\n\t\t\t);\n\t\t})}\n\t</div>\n);\n\nWord.propTypes = {\n\tguesseWord: PropTypes.string.isRequired,\n\tusedLetter: PropTypes.array.isRequired,\n}\n\nexport default Word;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Keyboard from \"./Keyboard\";\nimport Word from \"./Word\";\n\nconst WORDS = [\n\t\t\t\"JAVASCRIPT\",\n\t\t\t\"REACT\",\n\t\t\t\"PARIS\",\n\t\t\t\"ANGULAR\",\n\t\t\t\"SASHIMI\",\n\t\t\t\"SAIGON\",\n\t\t\t\"JQUERY\",\n\t\t\t\"SYMFONY\",\n\t\t\t\"PYTHON\",\n\t\t\t\"APPLE\",\n\t\t\t\"SAKURA\",\n\t\t\t\"BORDEAUX\",\n\t\t\t\"REDUX\",\n\t\t\t\"IONIC\",\n\t\t\t\"NATIVE\",\n\t\t\t\"VIETNAM\",\n\t\t\t\"GOOGLE\",\n\t\t\t\"ANDROID\",\n\t\t\t\"FACEBOOK\"\n\t\t],\n\t\tINIT_GAME_TIME = 3000;\n\n\nclass App extends Component {\n\tstate = {\n\t\tguesseWord: \"\",\n\t\tmatchedLetters: 0,\n\t\tguesses: 0,\n\t\talphabet: \"ABCDEFGHIJKLMNOPQRSTUVXWYZ\".split(\"\"),\n\t\tusedLetter: [],\n\t\tmessage: \"\",\n\t};\n\n\tcomponentDidMount() {\n\t\twindow.addEventListener(\"keyup\", (e) => {\n\t\t\tif(e.keyCode === 13){\n\t\t\t\tthis.initGame();\n\t\t\t}\n\t\t})\n\t\tthis.initGame();\n\t}\n\n\tclickLetter = (letter) => {\n\t\tconst { guesses, guesseWord, usedLetter } = this.state;\n\t\t\t\t\t\t\t\n\t\tif (!usedLetter.includes(letter)) {\n\t\t\tthis.setState({\n\t\t\t\tusedLetter: [letter, ...usedLetter],\n\t\t\t});\n\t\t}\n\n\t\tif (!guesseWord.includes(letter)) {\n\t\t\tthis.setState({\n\t\t\t\tguesses: guesses + 1,\n\t\t\t});\n\t\t\t\n\t\t} else {\n\t\t\tsetTimeout(() => this.setState({\n\t\t\t\tmatchedLetters: document.querySelectorAll(\".found\").length,\n\t\t\t\t}), 0);\t\n\t\t}\n\t\t\n\t\tthis.endGame();\n\n\t}\n\t\n\tendGame(){\n\t\tconst { guesses, guesseWord, matchedLetters } = this.state;\n\t\tif (guesses === 8) {\n\t\t\tthis.setState({message: `PENDU ! REJOUEZ !`});\n\t\t\tsetTimeout(() => this.initGame(), INIT_GAME_TIME);\t\t\n\t\t}\n\t\tif (matchedLetters === guesseWord.length){\n\t\t\tthis.initGame();\n\t\t}\n\t}\n\n\tgenerateWords() {\n\t\treturn WORDS[Math.floor(Math.random()*WORDS.length)];\n\t}\n\n\tinitGame = () => {\n\t\tthis.setState({ \n\t\t\tguesseWord: this.generateWords(), \n\t\t\tusedLetter: [], \n\t\t\tguesses: 0, \n\t\t\tmessage: \"\",\n\t\t\tmatchedLetters: 0,\n\t\t});\n\t}\n\n\trender() {\n\t\tconst { guesses, message, matchedLetters, guesseWord, usedLetter, alphabet } = this.state;\n\t\tconst won = matchedLetters === guesseWord.length;\n\n\t\treturn (\n\t\t\t<div className='App-header'>\n\t\t\t\t<h1>Jeu du pendu</h1>\n\t\t\t\t<p>Rat√© { guesses } fois</p>\n\t\t\t\t{ message !== '' &&  <div className=\"result\"><p>{ message }</p>\n\t\t\t\t<p><span role=\"img\" aria-label=\"skull\">üíÄ</span></p></div>}\n\t\t\t\t{ guesseWord !== null && (\n\t\t\t\t\t<Word\n\t\t\t\t\t\tguesseWord={guesseWord}\n\t\t\t\t\t\tusedLetter={usedLetter}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\n\t\t\t\t{ won && <div className=\"result\" id=\"winner\"><p><span role=\"img\" aria-label=\"trophy\">üèÜ</span></p><p>BRAVO ! \n\t\t\t\t\tPressez ENTREE ou cliquez sur une lettre pour une nouvelle partie.</p>\n\t\t\t\t\n\t\t\t\t</div>}\n\t\t\t\t<Keyboard\n\t\t\t\t\talphabet={alphabet}\n\t\t\t\t\taction={this.clickLetter}\n\t\t\t\t\tusedLetter={usedLetter}\n\t\t\t\t/>\n\n\t\t\t</div>\n\t\t);\n\t}\n\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}